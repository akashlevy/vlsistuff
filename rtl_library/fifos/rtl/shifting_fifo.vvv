

#DEPTH = 8
#DD = DEPTH-1
module shifting_fifo #(parameter WID = 32)(
     input clk,input rst_n
    ,input vldin, input [WID-1:0] din, output full
    ,input readout, output [WID-1:0] dout, output empty
    ,output [15:0] count
);

wire empty0,readout0;
wire [WID-1:0] dout0;
dstagefifo dtsage0 (.clk(clk),.rst_n(rst_n),.vldin(vldin),.din(din),.full(full),.empty(empty0),.dout(dout0),.readout(readout0));

#for II in range(1,DEPTH-1):
#    JJ = II -1
wire fullII,emptyII,readoutII;
wire [WID-1:0] doutII;
assign readoutJJ = !emptyJJ && !fullII;
dstagefifo dtsageII (.clk(clk),.rst_n(rst_n),.vldin(readoutJJ),.din(doutJJ),.full(fullII),.empty(emptyII),.dout(doutII),.readout(readoutII));
#
#KK = DD -1 
assign readoutKK = !emptyKK && !fullDD;
dstagefifo dtsageDD (.clk(clk),.rst_n(rst_n),.vldin(readoutKK),.din(doutKK),.full(fullDD),.empty(empty),.dout(dout),.readout(readout));


endmodule


module dstagefifo #(parameter WID = 32) ( input clk,input rst_n
  ,input vldin, input [WID-1:0] din, output full
  ,input readout, output [WID-1:0] dout, output empty
);
reg [WID-1:0] aa,bb;
reg aavld,bbvld;

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        aavld <= 0;
        bbvld <= 0;
        aa <= 0;
        bb <= 0;
    end else begin
        case ({vldin,readout,aavld,bbvld})
        4'b0000 : begin end
        4'b0010 : begin bb <= aa; bbvld <= 1; aavld <= 0; end
        4'b0001 : begin end
        4'b0011 : begin end

        4'b1000 : begin bb <= din; bbvld <= 1; end

        4'b1001 : begin aa <= din; aavld <= 1; end
        4'b1101 : begin bb <= din; bbvld <= 1; end
        4'b1110 : begin bb <= din; bbvld <= 1; aavld <= 0; end
        4'b1111 : begin aa <= din; aavld <= 1; bb <= aa; bbvld <= 1; end

        4'b0100 : begin end
        4'b0101 : begin bb <= 0; bbvld <= 0; end
        4'b0110 : begin aa <= 0; aavld <= 0; end
        4'b0111 : begin aa <= 0; aavld <= 0; bb <= aa; bbvld <= 1; end
        default: $display("UNTREATED ",vldin,readout,aavld,bbvld);
        endcase
    end
end
assign full = aavld && bbvld ;
assign empty = !bbvld && !aavld;
assign dout = bbvld ? bb : aavld ? aa : 0 ;
endmodule





